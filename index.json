
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    [{"authors":null,"categories":null,"content":"HU Yikun (胡易坤, Shanghai Overseas High-Level Talent) is an Assitant Research Fellow at the School of Cyber Science and Engineering, Shanghai Jiao Tong University. Before that, he was a Postdoctoral Fellow at HKUST. His research interests focus on (AI-assisted) Program Analysis and its application to Software Security. He is a member of the Lab of Cryptology and Computer Security (LoCCS), directed by Prof. Dawu Gu. If you would like to join our lab as a postgraduate or intern, feel free to send an e-mail for more information.\n","date":1738368000,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1740919331,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"HU Yikun (胡易坤, Shanghai Overseas High-Level Talent) is an Assitant Research Fellow at the School of Cyber Science and Engineering, Shanghai Jiao Tong University. Before that, he was a Postdoctoral Fellow at HKUST.","tags":null,"title":"Yikun Hu","type":"authors"},{"authors":null,"categories":null,"content":"Yikun HU (胡易坤) is an Assitant Research Fellow at the School of Cyber Science and Engineering, Shanghai Jiao Tong University. Before that, he was a Postdoctoral Fellow at HKUST. His research interests focus on (AI-assisted) Program Analysis and its application to Software Security. He is a member of the Lab of Cryptology and Computer Security (LoCCS), directed by Prof. Dawu Gu. If you would like to join our lab as a postgraduate or intern, feel free to send an e-mail for more information.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"372986362fa59a1284a53653b609e312","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"Yikun HU (胡易坤) is an Assitant Research Fellow at the School of Cyber Science and Engineering, Shanghai Jiao Tong University. Before that, he was a Postdoctoral Fellow at HKUST. His research interests focus on (AI-assisted) Program Analysis and its application to Software Security.","tags":null,"title":"Yikun Hu*","type":"authors"},{"authors":["Yikun Hu","Yituo He","Wenyu He","Haoran Li","Yubo Zhao","Shuai Wang","Dawu Gu"],"categories":[],"content":"","date":1738368000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1740919331,"objectID":"2c3d54a45366d8ce48fb6cfa2ba75a8c","permalink":"https://yikunh.github.io/publication/hu-2025-14943895/","publishdate":"2025-03-02T12:42:10.28308Z","relpermalink":"/publication/hu-2025-14943895/","section":"publication","summary":"","tags":[],"title":"Binary Cryptographic Function Identification via Similarity Analysis with Path-insensitive Emulation (Preprint)","type":"publication"},{"authors":["Kaiyan He","Yikun Hu","Xuehui Li","Yunhao Song","Yubo Zhao","Dawu Gu"],"categories":[],"content":"","date":1731542400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1731918593,"objectID":"447b4e5c8bc3356ce461d737d3537e7a","permalink":"https://yikunh.github.io/publication/he-2024-strtune/","publishdate":"2024-11-18T08:29:52.244554Z","relpermalink":"/publication/he-2024-strtune/","section":"publication","summary":"Binary Code Similarity Detection (BCSD) is significant for software security as it can address binary tasks such as malicious code snippets identification and binary patch analysis by comparing code patterns. Recently, there has been a growing focus on artificial intelligence-based approaches in BCSD due to their scalability and generalization. Because binaries are compiled with different compilation configurations, existing approaches still face notable limitations when comparing binary similarity. First, BCSD requires analysis on code behavior, and existing work claims to extract semantic, but actually still makes analysis in terms of syntax. Second, directly extracting features from assembly sequences, existing work cannot address the issues of instruction reordering and different syntax expressions caused by various compilation configurations. In this paper, we propose STRTUNE, which slices binary code based on data dependence and perform slice-level fine-tuning. To address the first limitation, STRTUNE performs backward slicing based on data dependence to capture how a value is computed along the execution. Each slice reflects the collecting semantics of the code, which is stable across different compilation configurations. STRTUNE introduces flow types to emphasize the independence of computations between slices, forming a graph representation. To overcome the second limitation, based on slices corresponding to the same value computation but having different syntax representation, STRTUNE utilizes a Siamese Network to fine-tune such pairs, making their representations closer in the feature space. This allows the cross-graph attention to focus more on the matching of similar slices based on slice contents and flow types involved. Our evaluation results demonstrate the effectiveness and practicality of STRTUNE. We show that STRTUNE outperforms the state-ofthe-art methods for BCSD, achieving a Recall@1 that is 25.3% and 22.2% higher than jTrans and GMN in the task of function retrieval cross optimization in x64.","tags":[],"title":"StrTune: Data Dependence-based Code Slicing for Binary Similarity Detection with Fine-tuned Representation","type":"publication"},{"authors":["Anshunkang Zhou","Yikun Hu","Xiangzhe Xu","Charles Zhang"],"categories":[],"content":"","date":1714521600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1717582941,"objectID":"a8db4d913fac7d4e37365ab3cf72b25f","permalink":"https://yikunh.github.io/publication/zhou-2024-arcturus/","publishdate":"2024-11-18T13:20:03.892874Z","relpermalink":"/publication/zhou-2024-arcturus/","section":"publication","summary":"Binary code similarity analysis is extremely useful, since it provides rich information about an unknown binary, such as revealing its functionality and identifying reused libraries. Robust binary similarity analysis is challenging, as heavy compiler optimizations can make semantically similar binaries have gigantic syntactic differences. Unfortunately, existing semantic-based methods still suffer from either incomplete coverage or low accuracy. In this article, we propose ARCTURUS, a new technique that can achieve high code coverage and high accuracy simultaneously by manipulating program execution under the guidance of code reachability. Our key insight is that the compiler must preserve program semantics (e.g., dependences between code fragments) during compilation; therefore, the code reachability, which implies the interdependence between code, is invariant across code transformations. Based on the above insight, our key idea is to leverage the stability of code reachability to manipulate the program execution such that deep code logic can also be covered in a consistent way. Experimental results show that ARCTURUS achieves an average precision of 87.8% with 100% block coverage, outperforming compared methods by 38.4%, on average. ARCTURUS takes only 0.15 second to process one function, on average, indicating that it is efficient for practical use.","tags":[],"title":"ARCTURUS: Full Coverage Binary Similarity Analysis with Reachability-guided Emulation","type":"publication"},{"authors":["Ziyi Zhou","Xuangan Xiao","Tianxiao Hou","Yikun Hu","Dawu Gu"],"categories":[],"content":"","date":1704931200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1708497270,"objectID":"2b25e61ffb90249736b1866893a71a25","permalink":"https://yikunh.github.io/publication/zhou-2024-a/","publishdate":"2024-02-21T06:34:10.719329Z","relpermalink":"/publication/zhou-2024-a/","section":"publication","summary":"To provide a tamper-proof mechanism for mobile apps to check the integrity of the device and their own code/data, Android phone manufacturers have introduced Manufacturer-provided Android Remote Attestation (MARA) frameworks. The MARA framework helps an app conduct a series of integrity checks, signs the check results, and sends them to remote servers for a remote attestation. Nonetheless, we observe that real-world MARA frameworks often adopt two implementations of integrity check (hardware-based and software-based) for compatibility consideration, and this allows an attacker to easily conduct a downgrade attack to force the app to utilize the software-based integrity check and forge checking results, even if the Android device is able to employ hardware-supported remote attestation securely. We demonstrate our MARA bypass approach against MARA frameworks (i.e., Google SafetyNet and Huawei SafetyDetect) on real Android devices, and design an automated measurement pipeline to analyze 35,245 popular Android apps, successfully attacking all 104 apps that use these MARA services, including well-known apps and games such as TikTok Lite, Huawei Wallet, and Pok´emon GO. Our study reveals the signiﬁcant risks against MARA frameworks in use.","tags":[],"title":"On the (In)Security of Manufacturer-Provided Remote Attestation Frameworks in Android","type":"publication"},{"authors":["Yakang Li","Yikun Hu","Yizhuo Wang","Yituo He","Haining Lu","Dawu Gu"],"categories":[],"content":"","date":1677628800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1693648897,"objectID":"cb61ced0adc77ca9a076720acb10b3a0","permalink":"https://yikunh.github.io/publication/li-2023-rgdroid/","publishdate":"2023-09-02T10:01:37.799479Z","relpermalink":"/publication/li-2023-rgdroid/","section":"publication","summary":"The rapid growth of Android malware calls for anti-malware systems to detect malware automatically. Detecting malware effectively is a non-trivial problem due to the high overlap in behaviors between malware and benign apps. Most existing automated Android malware detection methods use statistic features extracted from apps or graphs generated from method calls to identify malware. However, the methods that only use statistic features lead to false positives due to ignoring program semantics. Existing graph-based approaches suffer scalability problems due to the heavy-weight program analysis and timeconsuming graph matching. In addition, graph-based approaches could be evaded by modifying dependencies among method calls. As a result, crafted malicious apps resemble the benign ones.","tags":[],"title":"RGDroid: Detecting Android Malware with Graph Convolutional Networks against Structural Attacks","type":"publication"},{"authors":["Xuangan Xiao","Yizhuo Wang","Yikun Hu","Dawu Gu"],"categories":[],"content":"","date":1677628800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1731935815,"objectID":"6869ef691d393cf6a07f18c00c7c7e11","permalink":"https://yikunh.github.io/publication/xiao-2023-xvmp/","publishdate":"2024-11-18T13:17:24.917385Z","relpermalink":"/publication/xiao-2023-xvmp/","section":"publication","summary":"Obfuscation techniques are widely used to protect the digital copyright and intellectual property rights of software. Among them, code virtualization is one of the most powerful obfuscation techniques, which hides both the control ﬂow and the data ﬂow of the code, thereby preventing code from being decompiled. However, existing code virtualization solutions are not well-resistant to de-obfuscation techniques (e.g., symbolic execution and frequency analysis), and only target limited program languages and architectures, which are challenging to integrate into the process of software development and maintenance.","tags":[],"title":"xVMP: An LLVM-based Code Virtualization Obfuscator (Tool Demo)","type":"publication"},{"authors":["Yizhuo Wang","Yikun Hu","Xuangan Xiao","Dawu Gu"],"categories":[],"content":"","date":1669852800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1670951163,"objectID":"aacb8ad7a2775fb91895be07a5454f11","permalink":"https://yikunh.github.io/publication/wang-2022-i/","publishdate":"2022-12-13T17:06:03.619477Z","relpermalink":"/publication/wang-2022-i/","section":"publication","summary":"Confused deputy problem is a specific type of privilege escalation. It happens when a program tricks another more privileged one into misusing its authority. On AppleOS, system services are adopted to perform privileged operations when receiving inter-process communication (IPC) request from a user process. The confused deputy vulnerabilities may result if system services overlook the checking of IPC input. Unfortunately, it is tough to identify such vulnerabilities, which requires to understand the closed-source system services and private frameworks of the complex AppleOS by unraveling the dependencies in binaries.","tags":[],"title":"iService: Detecting and Evaluating the Impact of Confused Deputy Problem in AppleOS","type":"publication"},{"authors":["Hui Wang","Dawu Gu","Yuanyuan Zhang","Yikun Hu"],"categories":[],"content":"","date":1656633600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1660207508,"objectID":"a0d1b51da768c371c5986be624ba7c11","permalink":"https://yikunh.github.io/publication/wang-2022-b/","publishdate":"2022-08-11T08:45:08.400132Z","relpermalink":"/publication/wang-2022-b/","section":"publication","summary":"","tags":[],"title":"An empirical study of security issues in SSO server-side implementations","type":"publication"},{"authors":["Wensheng Tang","Yikun Hu","Gang Fan","Peisen Yao","Rongxin Wu","Guangyuan Bai","Pengcheng Wang","Charles Zhang"],"categories":[],"content":"","date":1635724800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1660207508,"objectID":"dd20cdeb1e8af0e899afd3eefe73e3fd","permalink":"https://yikunh.github.io/publication/tang-2021/","publishdate":"2022-08-11T08:45:07.989412Z","relpermalink":"/publication/tang-2021/","section":"publication","summary":"Status code mappings reveal state shifts of a program, mapping one status code to another. Due to careless programming or the lack of the system-wide knowledge of a whole program, developers can make incorrect mappings. Such errors are widely spread across modern software, some of which have even become critical vulnerabilities. Unfortunately, existing solutions merely focus on single status code values, while never considering the relationships, that is, mappings, among them. Therefore, it is imperative to propose an effective method to detect status code mapping errors.","tags":[],"title":"Transcode: Detecting Status Code Mapping Errors in Large-Scale Systems","type":"publication"},{"authors":["Yikun Hu","Hui Wang","Yuanyuan Zhang","Bodong Li","Dawu Gu"],"categories":[],"content":"","date":1622505600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1660207508,"objectID":"e532ce20f3b520cdd663a534d54d6230","permalink":"https://yikunh.github.io/publication/hu-2021/","publishdate":"2022-08-11T08:45:08.203331Z","relpermalink":"/publication/hu-2021/","section":"publication","summary":"Binary code similarity comparison is a methodology for identifying similar or identical code fragments in binary programs. It is indispensable in ﬁelds of software engineering and security, which has many important applications (e.g., plagiarism detection, bug detection). With the widespread of smart and Internet of Things (IoT) devices, an increasing number of programs are ported to multiple architectures (e.g., ARM, MIPS). It becomes necessary to detect similar binary code across architectures as well. The main challenge of this topic lies in the semantics-equivalent code transformation resulting from different compilation settings, code obfuscation, and varied instruction set architectures. Another challenge is the trade-off between comparison accuracy and coverage. Unfortunately, existing methods still heavily rely on semantics-less code features which are susceptible to the code transformation. Additionally, they perform the comparison merely either in a static or in a dynamic manner, which cannot achieve high accuracy and coverage simultaneously. In this paper, we propose a semantics-based hybrid method to compare binary function similarity. We execute the reference function with test cases, then emulate the execution of every target function with the runtime information migrated from the reference function. Semantic signatures are extracted during the execution as well as the emulation. Lastly, similarity scores are calculated from the signatures to measure the likeness of functions. We have implemented the method in a prototype system designated as BINMATCH which performs binary code similarity comparison across architectures of x86, ARM and MIPS on the Linux platform. We evaluate BINMATCH with nine real-word projects compiled with different compilation settings, on variant architectures, and with commonly-used obfuscation methods, totally performing over 100 million pairs of function comparison. The experimental results show that BINMATCH is resilient to the semantics-equivalent code transformation. Besides, it not only covers all target functions for similarity comparison, but also improves the accuracy comparing to the state-of-the-art solutions.","tags":[],"title":"A Semantics-Based Hybrid Approach on Binary Code Similarity Comparison","type":"publication"},{"authors":["Yikun Hu","吳恩達"],"categories":["Demo","教程"],"content":"Overview The Wowchemy website builder for Hugo, along with its starter templates, is designed for professional creators, educators, and teams/organizations - although it can be used to create any kind of site The template can be modified and customised to suit your needs. It’s a good platform for anyone looking to take control of their data and online identity whilst having the convenience to start off with a no-code solution (write in Markdown and customize with YAML parameters) and having flexibility to later add even deeper personalization with HTML and CSS You can work with all your favourite tools and apps with hundreds of plugins and integrations to speed up your workflows, interact with your readers, and much more The template is mobile first with a responsive design to ensure that your site looks stunning on every device. Get Started 👉 Create a new site 📚 Personalize your site 💬 Chat with the Wowchemy community or Hugo community 🐦 Twitter: @wowchemy @GeorgeCushen #MadeWithWowchemy 💡 Request a feature or report a bug for Wowchemy ⬆️ Updating Wowchemy? View the Update Tutorial and Release Notes Crowd-funded open-source software To help us develop this template and software sustainably under the MIT license, we ask all individuals and businesses that use it to help support its ongoing maintenance and development via sponsorship.\n❤️ Click here to become a sponsor and help support Wowchemy’s future ❤️ As a token of appreciation for sponsoring, you can unlock these awesome rewards and extra features 🦄✨\nEcosystem Hugo Academic CLI: Automatically import publications from BibTeX Inspiration Check out the latest demo of what you’ll get in less than 10 minutes, or view the showcase of personal, project, and business sites.\nFeatures Page builder - Create anything with widgets and elements Edit any type of content - Blog posts, publications, talks, slides, projects, and more! Create content in Markdown, Jupyter, or RStudio Plugin System - Fully customizable color and font themes Display Code and Math - Code highlighting and LaTeX math supported Integrations - Google Analytics, Disqus commenting, Maps, Contact Forms, and more! Beautiful Site - Simple and refreshing one page design Industry-Leading SEO - Help get your website found on search engines and social media Media Galleries - Display your images and videos with captions in a customizable gallery Mobile Friendly - Look amazing on every screen with a mobile friendly version of your site Multi-language - 34+ language packs including English, 中文, and Português Multi-user - Each author gets their own profile page Privacy Pack - Assists with GDPR Stand Out - Bring your site to life with animation, parallax backgrounds, and scroll effects One-Click Deployment - No servers. No databases. Only files. Themes Wowchemy and its templates come with automatic day (light) and night (dark) mode built-in. Alternatively, visitors can choose their preferred mode - click the moon icon in the top right of the Demo to see it in action! Day/night mode can also be disabled by the site admin in params.toml.\nChoose a stunning theme and font for your site. Themes are fully customizable.\nLicense Copyright 2016-present George Cushen.\nReleased under the MIT license.\n","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1607817600,"objectID":"279b9966ca9cf3121ce924dca452bb1c","permalink":"https://yikunh.github.io/post/getting-started/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/post/getting-started/","section":"post","summary":"Welcome 👋 We know that first impressions are important, so we've populated your new site with some initial content to help you get familiar with everything in no time.","tags":["Academic","开源"],"title":"Welcome to Wowchemy, the website builder for Hugo","type":"post"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Wowchemy Wowchemy | Documentation\nFeatures Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides Controls Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026#34;blueberry\u0026#34; if porridge == \u0026#34;blueberry\u0026#34;: print(\u0026#34;Eating...\u0026#34;) Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\nFragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}} Press Space to play!\nOne Two Three A fragment can accept two optional parameters:\nclass: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}} Press the S key to view the speaker notes!\nOnly the speaker can read these notes Press S key to view Themes black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026#34;/media/boards.jpg\u0026#34; \u0026gt;}} {{\u0026lt; slide background-color=\u0026#34;#0000FF\u0026#34; \u0026gt;}} {{\u0026lt; slide class=\u0026#34;my-style\u0026#34; \u0026gt;}} Custom CSS Example Let’s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; } Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://yikunh.github.io/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":["Yikun Hu","Yuanyuan Zhang","Dawu Gu"],"categories":[],"content":"","date":1546300800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1660210852,"objectID":"1e9e39174fa7d7ad22ec8d273bc10191","permalink":"https://yikunh.github.io/publication/hu-2019/","publishdate":"2022-08-11T09:40:52.58468Z","relpermalink":"/publication/hu-2019/","section":"publication","summary":"The security of binary programs is significantly threatened by software vulnerabilities. When vulnerabilities are found, those applications are exposed to malicious attacks that exploit the known vulnerabilities. Thus, it is necessary to patch them when vulnerabilities are reported to the public as soon as possible. However, it still heavily relies on manual work to locate and correct the corresponding defective code in the binary programs. In order to raise productivity and ensure software security, it becomes imperative to automate the process. In this paper, we propose BINPATCH to automatically patch known vulnerabilities of binary programs. It first locates the defective function, which contains the vulnerability, via similar code comparison. Then, it reuses the corresponding code from the correct version of the defective function as the patch code and inserts it to the defective function via binary rewriting. BINPATCH is evaluated on eight real-world vulnerabilities, and the experimental results show that it is able to not only locate the defective code effectively but also patch the code correctly.","tags":["Algorithms","binary code patching","Binary codes","binary program analysis","Manuals","Memory management","Registers","Reverse engineering","Security","Software","software security"],"title":"Automatically Patching Vulnerabilities of Binary Programs via Code Transfer From Correct Versions","type":"publication"},{"authors":["Yikun Hu","Yuanyuan Zhang","Juanru Li","Hui Wang","Bodong Li","Dawu Gu"],"categories":[],"content":"","date":1535760000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1660207508,"objectID":"0e45851d6dc1538c22a6a8fe3b8e55b3","permalink":"https://yikunh.github.io/publication/hu-2018/","publishdate":"2022-08-11T08:45:08.603936Z","relpermalink":"/publication/hu-2018/","section":"publication","summary":"Binary code clone analysis is an important technique which has a wide range of applications in software engineering (e.g., plagiarism detection, bug detection). The main challenge of the topic lies in the semantics-equivalent code transformation (e.g., optimization, obfuscation) which would alter representations of binary code tremendously. Another challenge is the trade-off between detection accuracy and coverage. Unfortunately, existing techniques still rely on semantics-less code features which are susceptible to the code transformation. Besides, they adopt merely either a static or a dynamic approach to detect binary code clones, which cannot achieve high accuracy and coverage simultaneously.","tags":[],"title":"BinMatch: A Semantics-Based Hybrid Approach on Binary Code Clone Analysis","type":"publication"},{"authors":null,"categories":null,"content":"\r[长期] 欢迎对程序分析和人工智能赋能的软件安全有兴趣的老师与同学与我交流联系。\n[长期] 欢迎有志于从事相关领域研究和工作或者想在 LoCCS 实习的同学与我联系。\n[Feb. 18] Our paper on Binary Cryptographic Function Identification will appear at OOPSLA\u0026#39;25.\n[Sept. 30] Congrats to Kaiyan for her paper on ML-assisted Binary Similarity Analysis accepted by TIFS.\n","date":1512086400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1512086400,"objectID":"f16fbd58616139583332c38b045fa1a7","permalink":"https://yikunh.github.io/news/news/","publishdate":"2017-12-01T00:00:00Z","relpermalink":"/news/news/","section":"news","summary":"List of news.\r\n","tags":[],"title":"News","type":"news"},{"authors":["Xuewen Zhang","Yuanyuan Zhang","Juanru Li","Yikun Hu","Huayi Li","Dawu Gu"],"categories":[],"content":"","date":1504224000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1660207507,"objectID":"1995e8c4c1a807d393fd327d92a992b1","permalink":"https://yikunh.github.io/publication/zhang-2017/","publishdate":"2022-08-11T08:45:07.627002Z","relpermalink":"/publication/zhang-2017/","section":"publication","summary":"The rapid-iteration, web-style update cycle of Android helps ﬁx revealed security vulnerabilities for its latest version. However, such security enhancements are usually only available for few Android devices released by certain manufacturers (e.g., Google’s ofﬁcial Nexus devices). More manufactures choose to stop providing system update service for their obsolete models, remaining millions of vulnerable Android devices in use. In this situation, a feasible solution is to leverage existing source code patches to ﬁx outdated vulnerable devices. To implement this, we introduce EMBROIDERY, a binary rewriting based vulnerability patching system for obsolete Android devices without requiring the manufacturer’s source code against Android fragmentation. EMBROIDERY patches the known critical framework and kernel vulnerabilities in Android using both static and dynamic binary rewriting techniques. It transplants ofﬁcial patches (CVE source code patches) of known vulnerabilities to different devices by adopting heuristic matching strategies to deal with the code diversity introduced by Android fragmentation, and fulﬁlls a complex dynamic memory modiﬁcation to implement kernel vulnerabilities patching. We employ EMBROIDERY to patch sophisticated Android kernel and framework vulnerabilities for various manufactures’ obsolete devices ranging from Android 4.2 to 5.1. The result shows the patched devices are able to defend against known exploits and the normal functions are not affected.","tags":[],"title":"Embroidery: Patching Vulnerable Binary Code of Fragmentized Android Devices","type":"publication"},{"authors":["Yikun Hu","Yuanyuan Zhang","Juanru Li","Dawu Gu"],"categories":[],"content":"","date":1493596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1660207507,"objectID":"8bfa23f84acedf1c922a7a18bdddf78a","permalink":"https://yikunh.github.io/publication/hu-2017/","publishdate":"2022-08-11T08:45:07.338777Z","relpermalink":"/publication/hu-2017/","section":"publication","summary":"Binary code clone detection (or similarity comparison) is a fundamental technique for many important applications, such as plagiarism detection, malware analysis, software vulnerability assessment and program comprehension. With the prevailing of smart and IoT (Internet of Things) devices, more and more programs are ported from traditional desktop platforms (e.g., IA-32) to ARM and MIPS architectures. It becomes imperative to detect cloned binary code across architectures. However, because of incomparable instruction sets of different architectures as well as alternative compiling conﬁgurations, it is difﬁcult to conduct a binary code clone detection with traditional syntax- or structure-based methods.","tags":[],"title":"Binary Code Clone Detection across Architectures and Compiling Configurations","type":"publication"},{"authors":null,"categories":null,"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"e8f8d235e8e7f2efd912bfe865363fc3","permalink":"https://yikunh.github.io/project/example/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/example/","section":"project","summary":"An example of using the in-built project page.","tags":["Deep Learning"],"title":"Example Project","type":"project"},{"authors":["Yikun Hu","Yuanyuan Zhang","Juanru Li","Dawu Gu"],"categories":[],"content":"","date":1456790400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1660207507,"objectID":"818e53ebc43ec08378580a0d28ab9021","permalink":"https://yikunh.github.io/publication/hu-2016/","publishdate":"2022-08-11T08:45:07.807544Z","relpermalink":"/publication/hu-2016/","section":"publication","summary":"With the prevailing of smart devices (e.g., smart phone, routers, cameras), more and more programs are ported from traditional desktop platform to embedded hardware with ARM or MIPS architecture. While the compiled binary code differs signiﬁcantly due to the variety of CPU architectures, these ported programs share the same code base of the desktop version. Thus it is feasible to utilize the program of commodity computer to help understand those cross-compiled binaries and locate functions with similar semantics. However, as instruction sets of different architectures are generally incomparable, it is difﬁcult to conduct a static cross-architecture binary code similarity comparison.","tags":[],"title":"Cross-Architecture Binary Semantics Understanding via Similar Code Comparison","type":"publication"},{"authors":["Spring'25","24","23","Fall'22"],"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"584a30c29e749be98c59938af7e9c767","permalink":"https://yikunh.github.io/talk/principles-of-compilation-nis2336/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/talk/principles-of-compilation-nis2336/","section":"event","summary":"Cooperating with Dr. ZHANG Aixin","tags":[],"title":"Principles of Compilation (NIS2336)","type":"event"},{"authors":["Fall'24","Fall'23"],"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"898004988ee41b36962de8bdda4a46a9","permalink":"https://yikunh.github.io/talk/software-system-security-nis3369/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/talk/software-system-security-nis3369/","section":"event","summary":"Cooperating with Dr. ZHANG Yueguo and Dr. GUI Jiaping","tags":[],"title":"Software System Security (NIS3369)","type":"event"}]